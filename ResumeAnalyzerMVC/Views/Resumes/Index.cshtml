@model List<ApplyService.Models.UserInfo>

@{
    ViewData["Title"] = "HR Dashboard";
}

<h2>Analyze And Download Resumes</h2>

<form method="post" action="@Url.Action("FilterResumes", "Resumes")" onsubmit="return prepareKeywords();" class="resume-filter-form">
    <div class="input-container">
        <input type="text" id="keywordInput" placeholder="Enter skills, e.g., .NET, SQL, Java" required />
    </div>
    <div id="keywordsContainer"></div>
    <div class="button-container">
        <button type="submit" class="btn-primary">Analyze Resumes</button>
    </div>
</form>

<h3>@(Model != null && Model.Any() ? "All Resumes" : "No Resumes Found")</h3>

@if (Model != null && Model.Any())
{
    <div class="resume-table-container">
        <table class="resume-table">
            <thead>
                <tr>
                    <th>Resume ID</th>
                    <th>Candidate Name</th>
                    <th>Email</th>
                    <th>Resume Uploaded</th>
                    <th>Download</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var resume in Model)
                {
                    <tr>
                        <td>@resume.Id</td>
                        <td>@resume.Name</td>
                        <td>@resume.Email</td>
                        <td>@(resume.CreatedAt != null ? resume.CreatedAt?.ToString("MM/dd/yyyy") : "N/A")</td>
                        <td>
                            <a href="@Url.Action("DownloadResume", "Resumes", new { id = resume.Id })" class="download-link">Download</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


<script>function prepareKeywords() {
        const input = document.getElementById("keywordInput").value;
        const keywords = input.split(',').map(keyword => keyword.trim()).filter(k => k);
        const container = document.getElementById("keywordsContainer");
        container.innerHTML = '';

        keywords.forEach(keyword => {
            const hiddenInput = document.createElement("input");
            hiddenInput.type = "hidden";
            hiddenInput.name = "keywords";
            hiddenInput.value = keyword;
            container.appendChild(hiddenInput);
        });

        return true;
    }</script>

<style>
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #F3F4F6;
        margin: 0;
        padding: 0;
        color: #1E293B;
    }

    .resume-filter-form {
        max-width: 500px;
        margin: 2rem auto;
        display: flex;
        flex-direction: column;
        gap: 1rem;
        align-items: center;
    }

    .input-container {
        width: 100%;
        padding: 1rem;
        background-color: #FFFFFF;
        border-radius: 8px;
        border: 1px solid #DDD;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
    }

        .input-container input {
            width: 100%;
            padding: 0.75rem;
            border: none;
            font-size: 1rem;
            background-color: transparent;
            color: #333;
            outline: none;
        }

            .input-container input:focus {
                border-color: #4F46E5;
                box-shadow: 0 0 5px rgba(79, 70, 229, 0.2);
            }

    .button-container {
        width: 100%;
    }

        .button-container button {
            width: 100%;
            padding: 0.75rem 1rem;
            background-color: #4F46E5;
            color: #FFFFFF;
            border: none;
            border-radius: 8px;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            .button-container button:hover {
                background-color: #4338CA;
            }

    /* Table Style */
    .resume-table-container {
        max-width: 900px;
        margin: 2rem auto;
        background: #FFFFFF;
        padding: 1rem;
        border-radius: 12px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }

    .resume-table {
        width: 100%;
        border-collapse: collapse;
        background-color: #FFFFFF;
        table-layout: fixed;
    }

        .resume-table thead {
            background-color: #4F46E5;
            color: #FFFFFF;
            text-align: left;
        }

        .resume-table th,
        .resume-table td {
            padding: 1rem;
            border-bottom: 1px solid #E5E7EB;
            font-size: 1rem;
        }

        .resume-table tbody tr:hover {
            background-color: #F3F4F6;
        }

    .download-link {
        color: #4F46E5;
        text-decoration: none;
        font-weight: 600;
        transition: color 0.3s;
    }

        .download-link:hover {
            color: #4338CA;
        }
</style>
